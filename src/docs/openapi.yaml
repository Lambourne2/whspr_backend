openapi: 3.0.3
info:
  title: Whspr API
  description: Backend API for Whspr App
  version: 1.0.0
  contact:
    name: Whspr Team
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://whspr-api.onrender.com
    description: Production server

paths:
  /healthz:
    get:
      summary: Health check
      description: Returns the health status of the API
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
  /v1/meta:
    get:
      summary: API metadata
      description: Returns metadata about the API
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  uptimeSec:
                    type: integer
                  gitSha:
                    type: string
                  nodeVersion:
                    type: string
                  platform:
                    type: string
                  arch:
                    type: string
  /v1/auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
              required:
                - email
                - password
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Bad request
  /v1/auth/login:
    post:
      summary: Login user
      description: Authenticates a user and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '401':
          description: Invalid credentials
  /v1/affirmations/generate:
    post:
      summary: Generate affirmations
      description: Generates positive affirmations based on themes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                themes:
                  type: array
                  items:
                    type: string
                tone:
                  type: string
                  enum: [calm, grateful, confident]
                count:
                  type: integer
                  minimum: 1
                  maximum: 50
                  default: 20
                gapSeconds:
                  type: integer
                  minimum: 1
                  maximum: 10
                  default: 4
              required:
                - themes
      responses:
        '200':
          description: Affirmations generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  affirmations:
                    type: array
                    items:
                      type: string
                  promptUsed:
                    type: string
                  model:
                    type: string
  /v1/voice/synthesize:
    post:
      summary: Synthesize voice
      description: Converts text to speech using ElevenLabs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  oneOf:
                    - type: string
                    - type: array
                      items:
                        type: string
                voiceId:
                  type: string
                voiceParams:
                  type: object
                  properties:
                    stability:
                      type: number
                      minimum: 0
                      maximum: 1
                    similarity_boost:
                      type: number
                      minimum: 0
                      maximum: 1
              required:
                - text
                - voiceId
      responses:
        '200':
          description: Voice synthesized successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                        duration:
                          type: number
  /v1/tracks:
    get:
      summary: List backing tracks
      description: Returns a list of available backing tracks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    durationSec:
                      type: integer
                    tags:
                      type: array
                      items:
                        type: string
  /v1/tracks/assemble:
    post:
      summary: Assemble sleep track
      description: Assembles a complete sleep track with affirmations and backing music
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                affirmations:
                  type: array
                  items:
                    type: string
                voiceId:
                  type: string
                backingTrackId:
                  type: string
                gapSeconds:
                  type: integer
                  minimum: 1
                  maximum: 10
                  default: 4
                targetLufs:
                  type: number
                  minimum: -30
                  maximum: -10
                  default: -16
              required:
                - affirmations
                - voiceId
                - backingTrackId
      responses:
        '200':
          description: Track assembled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  trackId:
                    type: string
                  url:
                    type: string
                  durationSec:
                    type: integer
  /v1/content/{trackId}:
    get:
      summary: Serve MP3 file
      description: Serves an MP3 file for a given track ID
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: MP3 file served successfully
        '404':
          description: Track not found
    delete:
      summary: Delete track
      description: Deletes a track by ID
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Track deleted successfully
        '404':
          description: Track not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
